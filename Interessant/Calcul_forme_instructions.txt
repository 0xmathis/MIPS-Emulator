J target	            Jump	                pc = pc_upper | (target << 2)
JAL target	            Jump And Link	        r31 = pc; pc = target << 2

ADDI rt, rs, imm	    Add Immediate	        rt = rs + imm
BEQ rs, rt, offset	    Branch On Equal	        if(rs == rt) pc += offset * 4
BNE rs, rt, offset	    Branch On Not Equal	    if(rs != rt) pc += offset * 4
LW rt, offset(rs)	    Load Word	            rt = *(int*)(offset + rs)
SW rt, offset(rs)	    Store Word	            *(int*)(offset + rs) = rt
BGTZ rs, offset	        Branch On > 0	        if(rs > 0) pc += offset * 4
BLEZ rs, offset	        Branch On 	            if(rs <= 0) pc += offset * 4
LUI rt, imm	            Load Upper Immediate	rt = imm << 16

ADD rd, rs, rt	        Add	                    rd = rs + rt
AND rd, rs, rt	        And	                    rd = rs & rt
OR rd, rs, rt	        Or                      rd = rs | rt
SLT rd, rs, rt	        Set On Less Than	    rd = rs < rt
SUB rd, rs, rt	        Subtract	            rd = rs - rt
XOR rd, rs, rt	        Exclusive Or	        rd = rs ^ rt
ROTR rd, rt, sa         Rotate Word Right       rd = rt[sa-1:0] + rt[31:sa]
SLL rd, rt, sa	        Shift Left Logical	    rd = rt << sa
SRL rd, rt, sa	        Shift Right Logical	    rd = rt >> sa
DIV rs, rt	            Divide	                HI = rs % rt; LO = rs / rt
MULT rs, rt	            Multiply	            HI, LO = rs * rt
MFHI rd	                Move From HI	        rd = HI
MFLO rd	                Move From LO	        rd = LO
JR rs	                Jump Register	        pc = rs
NOP                     No Operation            $zero += 0
SYSCALL	                System Call	            pc = pc; pc = 0x3c